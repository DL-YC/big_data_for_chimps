== First Exploration ==
[[first_exploration]]

Hadoop is a remarkably powerful tool for processing data, giving us at long last mastery over massive-scale distributed computing. More than likely, that's how you came to be reading this sentence.

What you might not yet know is that Hadoop's power comes from _embracing_, not conquering, the constraints of distributed computing; and in doing so, exposes a core simplicity that makes programming it exceptionally fun.

Hadoop's bargain is thus: you must agree to write all your programs according to single certain form, which we'll call the "Map / Reduce Haiku":

    Data flutters by
    Elephants make sturdy piles
    Number becomes thought

For any such program, Hadoop's diligent elephants will intelligently schedule the tasks across ones or dozens or thousands of machines; attend to logging, retry and error handling; distribute your data to the workers that process it; handle memory allocation, partitioning and network routing; and a myriad other details that would otherwise stand between you and insight.

Let's walk through an example. I'll omit code samples for the moment (you'll see them later in the book) so we can concentrate on the step-by-step transformation of the data.

=== Where is Barbecue?

The Wikipedia community has geolocated a great number of its articles. Not just defined places like Austin, TX, but one million deep: landmarks like Texas Memorial Stadium (where the Texas Longhorns football team plays) and Snow's BBQ (proclaimed "The Best Texas BBQ in the World") have computer-readable locations. What's more, since the connections among pages are robot-legible, links within topics can be read to imply a geolocation -- the movie "Dazed and Confused" (which took place in austin) and the artist Janis Joplin (who got her start in Austin) can be identifiably paired with the loose geolocation of Austin, TX.

Among all these first-and-second level connections, there's so much structure that it should be possible to identify the words that define the cultural "flavor" of a region -- and conversely, to identify the regional flavor of a topic. Here's how Hadoop makes answering a deep question like that simple.

<remark>Kurt says "Where is this word" is more interesting than "What is this place about" (because you can't answer the first one without global-ness</remark>

[[baldridge_bbq_wine]]
.Not the actual output, but gives you the picture; TODO insert actual results
image::images/baldridge-bbq_wine_beach_mountain-480.jpg[Location affinity for Beach, Mountain, BBQ and Wine]

==== Summarize every page on Wikipedia

First, we will summarize each topic by preparing its "word bag" -- a simple count of the words on its wikipedia page. This snippet of the <<wp_lexington_article>> text:

[[wp_lexington_article]]
._Wikipedia article on "Lexington, Texas"_
______
Lexington is a town in Lee County, Texas, United States. ... Snow's BBQ, which Texas Monthly called "the best barbecue in Texas" and The New Yorker named "the best Texas BBQ in the world" is located in Lexington.
______

turns into <<wp_lexington_wordbag,this wordbag>>:

[[wp_lexington_wordbag]]
._Wordbag for "Lexington, Texas"_
------
Lexington,_Texas {("texas",4)("lexington",2),("best",2),("bbq",2),("barbecue",1), ...}
------

You can carry out this process on each article separately, in any order, and without reference to information from elsewhere. That's important! Among other things, it lets us parallelize the process across as many machines as we care to afford. We'll call this type of step a "transform": it's independent, non-order-dependent, and isolated.

==== Bin by Location

Next we will annotate each wordbag with the geolocation of its article. Those are kept in a different data file, but we can merge the two files by joining each article metadata record with the wordbag having the same id. Here's its output:

[[wp_lexington_wordbag_and_coords]]
._Wordbag with coordinates_
------
Lexington,_Texas -97.01 30.41 023130130 {("texas",4)("lexington",2),("best",2),("bbq",2),("barbecue",1), ...}
------

The funny-looking number in the fourth column is the label of one cell in a <<geographic grid,quadkey_central_texas>> that
footnote:[a "quadkey", described later in <<quadkey,"Geographic Data">>]


[[quadkey_central_texas]]
.Grid Tiles for Central Texas
image::images/Quadtree-google_maps_screenshot.png[Grid tiles for Central Texas]

Next, combine the individual word bags to find each grid cell's word bag:

------
023130130 {(("many", X),...,("texas",X),...,("town",X)...("longhorns",X),...("bbq",X),...}
------

==== A pause, to think

Let's pause, take a breath, and examine the fundamental pattern that got us here. We

. transformed articles into wordbags
. augmented each wordbag with coordinates, using a join
. converted each article's precise point into the coarse-grained tile it sits on
. brought all wordbags for each tile together;
. merging each tile's word counts into a single combined wordbag.

It's a simple sequence of _transforms_ (operations on each record in isolation: steps 1, 3 and 5) and _reshapes_ -- operations that combine multiple rows, from different tables (the join in step 2) or in the same dataset (the group in step 4).

In doing so, we've turned articles that have a geolocation into coarse-grained regions that have implied frequencies for words. The particular frequencies arise from this combination of forces:

* _signal_: Terms that describe aspects of the human condition specific to each region, like "longhorns" or "barbecue", and direct references to place names, such as "Austin" or "Texas"
* _background_: The natural frequency of each term -- "second" is used more often than "syzygy" -- slanted by its frequency in geo-locatable texts (the word "town" occurs far more frequently than its natural rate, simply because towns are geolocatable).
* _noise_: Deviations introduced by the fact that we have a limited sample of text to draw inferences from.

Our next task -- the sprint home -- is to separate the signal from the background and (as much as possible) from the noise.

==== Pulling signal from noise

To isolate the signal, we'll pull out a trick called <<pmi,"Pointwise Mutual Information" (PMI)>>. Though it may sound like an insurance holding company, in fact PMI is a simple approach to isolate the noise and background. It compares the following:

* the rate the term 'barbecue' is used
* the rate that terms are used on grid cell 023130130
* the rate the term 'barbecue' is used on grid cell 023130130

Just as above, we can transform and reshape to get those figures:

* group the data by term; count occurrences
* group the data by tile; count occurrences
* group the data by term and tile; count occurrences
* count total occurrences
* combine those counts into rates, and form the PMI scores.

Rather than step through each operation, I'll wave my hands and pull its output from the oven:

------
023130130 {(("texas",X),...,("longhorns",X),...("bbq",X),...,...}
------

As expected, in <<baldridge_bbq_wine>> you see BBQ loom large over Texas and the Southern US; Wine, over the Napa Valley.



footnote:[You can use a fancier version of the approach used here to geolocate texts _based purely on their content_. An article mentioning barbecue and Willie Nelson would be placed near Austin, TX; one mentioning startups and trolleys in San Francisco. (see Baldridge et al TODO: reference)]

==== Takeaways

We accomplished an elaborate data exploration, yet at no point did we do anything complex. Instead of writing a big hairy monolithic program, we wrote a series of simple scripts that either _transformed_ or _reshaped_ the data.

As you'll see later, the scripts are readable and short (none exceed a few dozen lines of code). They run easily against sample data on your desktop, with no Hadoop cluster in sight; and they will then run, unchanged, against the whole of Wikipedia on dozens or hundreds of machines in a Hadoop cluster.

That's the approach we'll follow through this book: develop simple, maintainable transform/reshape scripts by iterating quickly and always keeping the data visible; then confidently transition those scripts to production as the search for a question becomes the rote production of an answer.

The challenge, then, isn't to learn to "program" Hadoop -- it's to learn how to think at scale, to choose a workable series of chess moves connecting the data you have to the insight you need. In the first part of the book, after briefly becoming familiar with the basic framework, we'll proceed through a series of examples to help you identify the key locality and thus the transformation each step calls for. In the second part of that book, we'll apply this to a range of interesting problems and so build up a set of reusable tools for asking deep questions in actual practice.
